# TODO: check if all kWh and Wh versions are needed
- name: Grid energy cost per kWh
  state: >
    {{
      states('input_number.energy_cost_green_power') | float +
      states('input_number.energy_cost_' + ('first' if states('sensor.monthly_energy_from_grid') | float < 100 else 'after_first') + '_100kwh_of_month') | float
    }}
  unit_of_measurement: "$/kWh"
  state_class: measurement
  availability: >
    {{
      has_value('input_number.energy_cost_green_power') and
      has_value('sensor.monthly_energy_from_grid') and
      has_value('input_number.energy_cost_first_100kwh_of_month') and
      has_value('input_number.energy_cost_after_first_100kwh_of_month')
    }}
- name: Grid energy cost per Wh
  state: "{{ states('sensor.grid_energy_cost_per_kwh') | float / 1000 }}"
  unit_of_measurement: "$/Wh"
  state_class: measurement

- name: Energy savings from solar per kWh
  state: >
    {{
      states('input_number.energy_cost_green_power') | float +
      states('input_number.energy_cost_' + ('first' if states('sensor.monthly_energy_consumed') | float < 100 else 'after_first') + '_100kwh_of_month') | float -
      states('sensor.effective_energy_cost_per_kwh') | float
    }}
  unit_of_measurement: "$/kWh"
  state_class: measurement
  availability: >
    {{
      has_value('input_number.energy_cost_green_power') and
      has_value('sensor.monthly_energy_consumed') and
      has_value('input_number.energy_cost_first_100kwh_of_month') and
      has_value('input_number.energy_cost_after_first_100kwh_of_month')
    }}
- name: Energy savings from solar per Wh
  state: "{{ states('sensor.energy_savings_from_solar_per_kwh') | float / 1000 }}"
  unit_of_measurement: "$/Wh"
  state_class: measurement

- name: Effective energy cost per kWh
  state: "{{ states('sensor.grid_energy_cost_per_kwh') | float * (1 - states('sensor.power_meter_relative_autonomy') | float / 100) }}"
  unit_of_measurement: "$/kWh"
  state_class: measurement
  availability: >
    {{
      has_value('sensor.grid_energy_cost_per_kwh') and
      has_value('sensor.power_meter_relative_autonomy')
    }}
- name: Effective energy cost per Wh
  state: "{{ states('sensor.effective_energy_cost_per_kwh') | float / 1000 }}"
  unit_of_measurement: "$/Wh"
  state_class: measurement

- name: Total power cost
  state: "{{ (states('sensor.power_meter_power_load_consumed') | float * states('sensor.effective_energy_cost_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h
- name: Total power cost savings
  state: >
    {{
      (states('sensor.power_meter_power_load_consumed') | float *
      states('sensor.energy_savings_from_solar_per_wh') | float +
      states('sensor.power_meter_power_grid_export') | float *
      states('input_number.energy_export_price') | float / 1000
      ) | round(9)
    }}
  unit_of_measurement: $/h

- name: Lights power cost
  state: "{{ (states('sensor.all_light_power') | float * states('sensor.effective_energy_cost_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h
- name: Lights power cost savings
  state: "{{ (states('sensor.all_light_power') | float * states('sensor.energy_savings_from_solar_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h

- name: Living room aircon power cost
  state: "{{ (states('sensor.living_room_aircon_power') | float * states('sensor.effective_energy_cost_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h
- name: Living room aircon power cost savings
  state: "{{ (states('sensor.living_room_aircon_power') | float * states('sensor.energy_savings_from_solar_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h

- name: Dining room aircon power cost
  state: "{{ (states('sensor.dining_room_aircon_power') | float * states('sensor.effective_energy_cost_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h
- name: Dining room aircon power cost savings
  state: "{{ (states('sensor.dining_room_aircon_power') | float * states('sensor.energy_savings_from_solar_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h

- name: Bedroom aircon power cost
  state: "{{ (states('sensor.bedroom_aircon_power') | float * states('sensor.effective_energy_cost_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h
- name: Bedroom aircon power cost savings
  state: "{{ (states('sensor.bedroom_aircon_power') | float * states('sensor.energy_savings_from_solar_per_wh') | float) | round(9) }}"

- name: Office heater power cost
  state: "{{ (states('sensor.office_heater_power') | float * states('sensor.effective_energy_cost_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h
- name: Office heater power cost savings
  state: "{{ (states('sensor.office_heater_power') | float * states('sensor.energy_savings_from_solar_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h

- name: Nursery heater power cost
  state: "{{ (states('sensor.nursery_heater_power') | float * states('sensor.effective_energy_cost_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h
- name: Nursery heater power cost savings
  state: "{{ (states('sensor.nursery_heater_power') | float * states('sensor.energy_savings_from_solar_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h

- name: Fans power cost
  state: "{{ (states('sensor.all_fan_power') | float * states('sensor.effective_energy_cost_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h
- name: Fans power cost savings
  state: "{{ (states('sensor.all_fan_power') | float * states('sensor.energy_savings_from_solar_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h

- name: Humidifiers power cost
  state: "{{ (states('sensor.all_humidifier_power') | float * states('sensor.effective_energy_cost_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h
- name: Humidifiers power cost savings
  state: "{{ (states('sensor.all_humidifier_power') | float * states('sensor.energy_savings_from_solar_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h

- name: Kitchen appliances power cost
  state: "{{ (states('sensor.kitchen_appliances_power') | float * states('sensor.effective_energy_cost_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h
- name: Kitchen appliances power cost savings
  state: "{{ (states('sensor.kitchen_appliances_power') | float * states('sensor.energy_savings_from_solar_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h

- name: Dishwasher power cost
  state: "{{ (states('sensor.dishwasher_power') | float * states('sensor.effective_energy_cost_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h
- name: Dishwasher power cost savings
  state: "{{ (states('sensor.dishwasher_power') | float * states('sensor.energy_savings_from_solar_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h

- name: Fridge power cost
  state: "{{ (states('sensor.fridge_power') | float * states('sensor.effective_energy_cost_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h
- name: Fridge power cost savings
  state: "{{ (states('sensor.fridge_power') | float * states('sensor.energy_savings_from_solar_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h

- name: Freezer, mini fridge, routers power cost
  state: "{{ (states('sensor.freezer_mini_fridge_routers_power') | float * states('sensor.effective_energy_cost_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h
- name: Freezer, mini fridge, routers power cost savings
  state: "{{ (states('sensor.freezer_mini_fridge_routers_power') | float * states('sensor.energy_savings_from_solar_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h

- name: Washer power cost
  state: "{{ (states('sensor.washer_power') | float * states('sensor.effective_energy_cost_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h
- name: Washer power cost savings
  state: "{{ (states('sensor.washer_power') | float * states('sensor.energy_savings_from_solar_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h

- name: Dryer power cost
  state: "{{ (states('sensor.dryer_power') | float * states('sensor.effective_energy_cost_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h
- name: Dryer power cost savings
  state: "{{ (states('sensor.dryer_power') | float * states('sensor.energy_savings_from_solar_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h

- name: TV, speakers, PC, Home Assistant, router relay, security hub power cost
  state: "{{ (states('sensor.tv_speakers_pc_home_assistant_router_relay_security_hub_power') | float * states('sensor.effective_energy_cost_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h
- name: TV, speakers, PC, Home Assistant, router relay, security hub power cost savings
  state: "{{ (states('sensor.tv_speakers_pc_home_assistant_router_relay_security_hub_power') | float * states('sensor.energy_savings_from_solar_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h

- name: Water heater, oven & stovetop power cost
  state: "{{ (states('sensor.water_heater_oven_stovetop_power') | float * states('sensor.effective_energy_cost_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h
- name: Water heater, oven & stovetop power cost savings
  state: "{{ (states('sensor.water_heater_oven_stovetop_power') | float * states('sensor.energy_savings_from_solar_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h

- name: Office desk, computer & monitor, cooler, fish tank power cost
  state: "{{ (states('sensor.office_desk_computer_monitor_cooler_fish_tank_power') | float * states('sensor.effective_energy_cost_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h
- name: Office desk, computer & monitor, cooler, fish tank power cost savings
  state: "{{ (states('sensor.office_desk_computer_monitor_cooler_fish_tank_power') | float * states('sensor.energy_savings_from_solar_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h

- name: Phone chargers power cost
  state: "{{ (states('sensor.phone_chargers_power') | float * states('sensor.effective_energy_cost_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h
- name: Phone chargers power cost savings
  state: "{{ (states('sensor.phone_chargers_power') | float * states('sensor.energy_savings_from_solar_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h

- name: Sensors power cost
  state: "{{ (states('sensor.sensors_power') | float * states('sensor.effective_energy_cost_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h
- name: Sensors power cost savings
  state: "{{ (states('sensor.sensors_power') | float * states('sensor.energy_savings_from_solar_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h

- name: Paludarium, picture frame, camera power cost
  state: "{{ (states('sensor.paludarium_picture_frame_camera_power') | float * states('sensor.effective_energy_cost_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h
- name: Paludarium, picture frame, camera power cost savings
  state: "{{ (states('sensor.paludarium_picture_frame_camera_power') | float * states('sensor.energy_savings_from_solar_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h

- name: Standby power cost
  state: "{{ (states('sensor.all_standby_power') | float * states('sensor.effective_energy_cost_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h
- name: Standby power cost savings
  state: "{{ (states('sensor.all_standby_power') | float * states('sensor.energy_savings_from_solar_per_wh') | float) | round(9) }}"
  unit_of_measurement: $/h

- name: Dan's phone charger energy
  state: >
    {%- set energy = states('sensor.dan_s_phone_charger_energy') | float(0) -%}
    {%- if states('device_tracker.dan_s_phone') == "home" and states('sensor.dan_s_phone_battery_state') in ("Charging", "Full") and has_value('sensor.dan_s_phone_battery_level') -%}
      {%- set current_battery_level = states('sensor.dan_s_phone_battery_level') | float -%}
      {%- set last_battery_level = state_attr('sensor.dan_s_phone_charger_energy', 'last_battery_level') | float(current_battery_level) -%}
      {%- if current_battery_level > last_battery_level -%}
        {%- set battery_capacity = 0.167 -%}
        {%- set energy = energy + ((current_battery_level - last_battery_level) / 100 * battery_capacity) -%}
      {%- elif current_battery_level in (80, 100) -%}
        {%- set time_since_last_update = (as_timestamp(now()) - state_attr('sensor.dan_s_phone_charger_energy', 'last_update_time') | float(as_timestamp(now()))) -%}
        {%- if time_since_last_update > 0.1 -%}
          {%- set trickle_charge_power = 0.5 -%}
          {%- set energy = energy + trickle_charge_power * time_since_last_update / 3600 -%}
        {%- endif -%}
      {%- endif -%}
    {%- endif -%}
    {{- energy -}}
  unit_of_measurement: kWh
  device_class: energy
  state_class: total_increasing
  attributes:
    last_battery_level: "{{ states('sensor.dan_s_phone_battery_level') | float }}"
    last_update_time: "{{ as_timestamp(now()) }}"
