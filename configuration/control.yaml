input_select:
  scene:
    name: Scene
    options:
      - Sleep
      - Morning
      - Day
      - Night
      - TV
      - Bright
      - Away (Day)
      - Away (Night)
    icon: mdi:home-lightning-bolt

input_boolean:
  napping_in_bedroom:
    name: Napping in bedroom
    icon: mdi:bed
  napping_in_nursery:
    name: Napping in nursery
    icon: mdi:cradle
  pets_home_alone:
    name: Pets home alone
    icon: mdi:dog-side
  development_mode:
    name: Development Mode
    icon: mdi:dev-to

input_datetime:
  morning_time:
    name: Morning time
    has_time: true
    icon: mdi:alarm
  nursery_time:
    name: Nursery time
    has_time: true
    icon: mdi:cradle
  bed_time:
    name: Bed time
    has_time: true
    icon: mdi:bed-clock
  circadian_end_time:
    name: End time
    has_time: true
    icon: mdi:clock-end

template:
  - binary_sensor:
      - name: Display day card # TODO: maybe not required anymore
        unique_id: display_day_card
        state: >
          {{
            states('input_select.scene') != 'Sleep' and
            today_at('00:00') + timedelta(seconds=state_attr('input_datetime.bed_time', 'timestamp')|float(0)) > now()
          }}
        icon: mdi:sun-clock
      - name: TV playing
        unique_id: tv_playing
        state: "{{ states('sensor.tv_state') == 'playing' and states('media_player.tv') == 'on' }}"
        icon: mdi:play-pause
        availability: "{{ has_value('sensor.tv_state') or states('media_player.tv') == 'off' }}"
      - name: Dark outside
        unique_id: dark_outside
        state: >
          {{
            states('sensor.weather_station_illuminance')|float < 5000 or 
            states('sun.sun') == 'below_horizon'
          }}
        delay_off: 0:05
        icon: mdi:theme-light-dark
        availability: "{{ has_value('sensor.weather_station_illuminance') and has_value('sun.sun') }}"
      - name: Washer running
        unique_id: washer_running
        state: "{{ as_datetime(states('sensor.washer_completion_time')) >= now() }}"
        device_class: running
        icon: mdi:washing-machine
        availability: "{{ has_value('sensor.washer_completion_time') }}"
      - name: Dryer running
        unique_id: dryer_running
        state: "{{ as_datetime(states('sensor.dryer_completion_time')) >= now() }}"
        device_class: running
        icon: mdi:tumble-dryer
        availability: "{{ has_value('sensor.dryer_completion_time') }}"
  - sensor:
      - name: Washer completion percentage
        unique_id: washer_completion_percentage
        state: >
          {% set start = as_datetime(states('sensor.washer_start_time')) %}
          {% set end = as_datetime(states('sensor.washer_completion_time')) %}
          {%- if end > now() > start -%}
            {{- (100 * (now() - start) / (end - start))|round(0)|max(1) -}}
          {%- elif now() < end + timedelta(hours = 6) -%}
            100
          {%- else -%}
            0
          {%- endif -%}
        icon: mdi:percent
        availability: "{{ has_value('sensor.washer_start_time') and has_value('sensor.washer_completion_time')}}"
      - name: Dryer completion percentage
        unique_id: dryer_completion_percentage
        state: >
          {% set start = as_datetime(states('sensor.dryer_start_time')) %}
          {% set end = as_datetime(states('sensor.dryer_completion_time')) %}
          {%- if end > now() > start -%}
            {{- (100 * (now() - start) / (end - start))|round(0)|max(1) -}}
          {%- elif now() < end + timedelta(hours = 6) -%}
            100
          {%- else -%}
            0
          {%- endif -%}
        icon: mdi:percent
        availability: "{{ has_value('sensor.dryer_start_time') and has_value('sensor.dryer_completion_time')}}"
  - triggers:
      - trigger: state
        entity_id: select.washer
        from: stop
        to: run
    sensor:
      - name: Washer start time
        unique_id: washer_start_time
        device_class: timestamp
        state: "{{ now() }}"
  - triggers:
      - trigger: state
        entity_id: select.dryer
        from: stop
        to: run
    sensor:
      - name: Dryer start time
        unique_id: dryer_start_time
        device_class: timestamp
        state: "{{ now() }}"
  - triggers:
      - trigger: state
        entity_id:
          - sensor.washer_completion_time
          - sensor.dryer_completion_time
      - trigger: time
        at: "00:00:00"
    binary_sensor:
      - name: Washer or dryer run today
        unique_id: washer_or_dryer_run_today
        state: >
          {{
            as_datetime(states('sensor.washer_completion_time')).date() == now().date() or
            as_datetime(states('sensor.dryer_completion_time')).date() == now().date()
          }}
        icon: mdi:washing-machine
        availability: "{{ has_value('sensor.washer_completion_time') and has_value('sensor.dryer_completion_time') }}"

automation:
  - alias: Turn TV on if not already on
    id: turn_tv_on_if_not_already_on
    description: "Required to turn the TV on from Home Assistant - sends a wake on lan magic packet"
    triggers:
      - trigger: webostv.turn_on
        entity_id: media_player.tv
    actions:
      - action: wake_on_lan.send_magic_packet
        data:
          mac: !secret tv_mac
  # TODO: https://app.asana.com/0/1207020279479204/1207033183175582/f
  # Maybe set up homekit here on zwave setup completion? Or maybe do this here:
  # https://app.asana.com/0/1207020279479204/1207033183175579/f
  - alias: Renew LG TV developer mode session weekly
    id: renew_lgtv_developer_mode_session_weekly
    description: "Required to use TV app launcher and media state reporter"
    actions:
      - action: rest_command.renew_lgtv_developer_mode_session
    triggers:
      - trigger: time
        at: "01:01:01"
    conditions:
      - condition: time
        weekday:
          - sun
    mode: single

rest_command:
  renew_lgtv_developer_mode_session:
    url: !secret lgtv_developer_mode_session_renewing_url

script:
  toggle_group:
    alias: Toggle group
    description: If group is on (for both 'any' and 'all' group types), turn all off else turn all on.
    mode: queued
    fields:
      group:
        name: Group
        description: The group to toggle.
        example: group.example
        required: true
    sequence:
      - if:
          - condition: template
            value_template: "{{ states(group) == 'on' }}"
        then:
          - action: homeassistant.turn_off
            target:
              entity_id: "{{ expand(group) | map(attribute='entity_id') | list }}"
        else:
          - action: homeassistant.turn_on
            target:
              entity_id: "{{ expand(group) | map(attribute='entity_id') | list }}"
